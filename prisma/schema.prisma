// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id         String    @id
  email      String?
  name       String?
  imageUrl   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isOnline   Boolean   @default(false)

  // Relations
  channels        Channel[]       @relation("CreatedChannels")
  channelMembers  ChannelMember[]
  messages        Message[]
  navigationHistory ChannelNavigation[]
  drafts         ChannelDraft[]
  reactions      Reaction[]
  readReceipts   ReadReceipt[]
  receivedInvitations ChannelInvitation[] @relation("ReceivedInvitations")
  sentInvitations     ChannelInvitation[] @relation("SentInvitations")

  @@map("users")
}

model Channel {
  id          String    @id @default(uuid())
  name        String
  description String?
  type        ChannelType
  createdById String
  createdAt   DateTime  @default(now())
  lastActivityAt DateTime @default(now()) @map("last_activity_at")
  memberCount  Int      @default(0) @map("member_count")

  // Relations
  createdBy      User            @relation("CreatedChannels", fields: [createdById], references: [id])
  members        ChannelMember[]
  messages       Message[]
  navigationHistory ChannelNavigation[]
  drafts         ChannelDraft[]
  invitations    ChannelInvitation[]

  @@map("channels")
}

model ChannelMember {
  channelId String
  userId    String
  role      MemberRole @default(MEMBER)
  createdAt DateTime   @default(now())
  lastReadAt DateTime  @default(now()) @map("last_read_at")
  joinedAt   DateTime  @default(now()) @map("joined_at")
  unreadCount Int      @default(0) @map("unread_count")

  // Relations
  channel   Channel    @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([channelId, userId])
  @@map("channel_members")
}

model ChannelNavigation {
  id        String   @id @default(uuid())
  userId    String
  channelId String
  viewedAt  DateTime @default(now())
  order     Int

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
  @@map("channel_navigation")
}

enum MessageDeliveryStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

model Message {
  id          String      @id @default(cuid())
  content     String
  channelId   String
  userId      String
  parentId    String?
  replyCount  Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deliveryStatus MessageDeliveryStatus @default(SENT)
  
  // Relations
  channel     Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Message?    @relation("ThreadReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies     Message[]   @relation("ThreadReplies")
  reactions   Reaction[]
  readBy      ReadReceipt[]
  attachments Attachment[]

  @@map("messages")
  @@index([channelId])
  @@index([userId])
  @@index([parentId])
}

model Reaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  
  // Relations
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reactions")
  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

model ReadReceipt {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  
  // Relations
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("read_receipts")
  @@index([messageId])
  @@index([userId])
}

model Attachment {
  id        String   @id @default(cuid())
  messageId String
  url       String
  type      String   
  name      String
  createdAt DateTime @default(now())
  
  // Relations
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("attachments")
  @@index([messageId])
}

enum ChannelType {
  PUBLIC
  PRIVATE
  DM
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

model ChannelDraft {
  id        String   @id @default(uuid())
  userId    String
  channelId String
  content   String
  deviceId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId, deviceId])
  @@map("channel_drafts")
  @@index([userId])
  @@index([channelId])
}

model ChannelInvitation {
  id          String      @id @default(uuid())
  channelId   String
  userId      String
  inviterId   String
  role        MemberRole  @default(MEMBER)
  status      InvitationStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  expiresAt   DateTime?

  // Relations
  channel     Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user        User        @relation("ReceivedInvitations", fields: [userId], references: [id], onDelete: Cascade)
  inviter     User        @relation("SentInvitations", fields: [inviterId], references: [id], onDelete: Cascade)

  @@unique([channelId, userId])
  @@map("channel_invitations")
  @@index([userId])
  @@index([channelId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}
