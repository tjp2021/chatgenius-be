{
  "projectName": "SOA Chat Application Backend",
  "description": "A NestJS backend API that is part of a service-oriented architecture chat application featuring real-time chat, AI-powered interactions, and systematic documentation of development and debugging processes.",
  "rules": {
    "paslCommand": {
      "trigger": "Run PASL",
      "description": "Executes a complete Problem Analysis, Solution Attempts, Final Solution, and Lessons Learned cycle",
      "sequence": [
        {
          "step": "Problem Analysis",
          "template": "Problem Analysis [CG-{YYYYMMDD}-{sequential_number}]\n\n- **Issue Description**: {description}\n- **Symptoms**: {observed behavior}\n- **Impact**: {what's affected}\n- **Initial Investigation**: {first findings}\n- **Root Cause Hypotheses**: {possible causes}"
        },
        {
          "step": "Solution Attempts",
          "template": "Solution Attempts [CG-{YYYYMMDD}-{sequential_number}]\n\n- **Attempt 1**: {description}\n  - Result: {outcome}\n  - Learnings: {what we discovered}\n- **Attempt 2**: {description}\n  - Result: {outcome}\n  - Learnings: {what we discovered}"
        },
        {
          "step": "Final Solution",
          "template": "Final Solution [CG-{YYYYMMDD}-{sequential_number}]\n\n- **Solution Description**: {what was done}\n- **Implementation Details**: {how it was done}\n- **Verification**: {how we confirmed it worked}\n- **Side Effects**: {any implications}"
        },
        {
          "step": "Lessons Learned",
          "template": "Lessons Learned [CG-{YYYYMMDD}-{sequential_number}]\n\n- **Technical Insights**: {what we learned about the system}\n- **Process Improvements**: {what we could do better}\n- **Prevention Strategies**: {how to avoid similar issues}\n- **Documentation Updates**: {what needs to be updated}"
        }
      ],
      "output": {
        "format": "markdown",
        "divider": "==================================================================",
        "autoSave": false
      }
    },
    "deduceCommand": {
      "trigger": "Run deduce",
      "description": "Analyzes the context window to deduce error sources and create an implementation plan for debugging NestJS-specific issues",
      "workflow": {
        "contextAnalysis": {
          "steps": [
            "Review all prior solution attempts",
            "Identify patterns in failed dependency injections",
            "Map module dependencies and circular dependencies",
            "Isolate common failure points in NestJS lifecycle hooks",
            "Check provider registration issues"
          ]
        },
        "deductiveReasoning": {
          "process": [
            "Process of elimination",
            "Chain of thought reasoning",
            "Logical deduction",
            "NestJS-specific pattern recognition"
          ],
          "output": {
            "format": "markdown",
            "sections": [
              {
                "title": "NestJS Error Pattern Analysis",
                "content": [
                  "Identified patterns in DI errors",
                  "Common module configuration issues",
                  "Lifecycle hook problems",
                  "Environmental factors affecting the NestJS app"
                ]
              },
              {
                "title": "Module Risk Analysis",
                "content": [
                  "High-risk modules identified",
                  "Dependency injection risk assessment",
                  "Impact on other modules",
                  "Probability of cascading failures"
                ]
              },
              {
                "title": "Solution Candidates",
                "content": [
                  "Potential NestJS-specific solutions ranked by likelihood",
                  "Implementation complexity considering NestJS architecture",
                  "Risk mitigation strategies within NestJS constraints",
                  "Expected outcomes based on NestJS behavior"
                ]
              }
            ]
          }
        }
      }
    },
    "developmentGuidelines": {
      "codeQualityPrinciples": {
        "description": "Core principles for NestJS backend development",
        "principles": [
          {
            "name": "NestJS Module Organization",
            "description": "Proper module organization and dependency management",
            "requirements": [
              "Feature-based module organization",
              "Proper provider and controller registration",
              "Clear module boundaries and responsibilities",
              "Appropriate use of shared modules"
            ]
          },
          {
            "name": "Dependency Injection Best Practices",
            "description": "Following NestJS DI patterns",
            "requirements": [
              "Use constructor-based injection",
              "Avoid circular dependencies",
              "Properly scope providers (REQUEST, DEFAULT, TRANSIENT)",
              "Use custom providers when needed"
            ]
          },
          {
            "name": "Exception Handling",
            "description": "Proper exception handling in NestJS",
            "requirements": [
              "Use built-in HTTP exceptions",
              "Implement custom exception filters",
              "Global exception handling",
              "Proper exception hierarchy"
            ]
          },
          {
            "name": "Middleware and Interceptors",
            "description": "Proper use of NestJS request pipeline",
            "requirements": [
              "Use middleware for request preprocessing",
              "Implement interceptors for response transformation",
              "Apply guards for authorization",
              "Use pipes for validation"
            ]
          },
          {
            "name": "TypeORM Integration",
            "description": "Best practices for database integration",
            "requirements": [
              "Use Repository pattern",
              "Implement proper entity relationships",
              "Handle transactions correctly",
              "Optimize database queries"
            ]
          }
        ]
      },
      "nestPatterns": {
        "socketCommunication": {
          "rules": [
            "Use @WebSocketGateway() properly",
            "Implement proper socket authentication with WsGuard",
            "Use @SubscribeMessage() decorator correctly",
            "Handle WebSocket lifecycle events"
          ],
          "bestPractices": {
            "authentication": "Implement WsGuard for socket authentication",
            "eventHandling": "Use proper event decorators and typing",
            "errorHandling": "Implement exception filters for WebSocket events"
          }
        },
        "controllerDesign": {
          "rules": [
            "Clear route organization",
            "Proper HTTP method usage",
            "Input validation using DTOs",
            "Response serialization"
          ],
          "bestPractices": {
            "validation": "Use class-validator with ValidationPipe",
            "serialization": "Use class-transformer for response shaping",
            "documentation": "Use OpenAPI decorators for Swagger"
          }
        },
        "serviceImplementation": {
          "rules": [
            "Business logic isolation",
            "Proper error handling",
            "Transaction management",
            "Caching strategy"
          ],
          "bestPractices": {
            "transactions": "Use @Transaction() decorator",
            "caching": "Implement CacheInterceptor properly",
            "logging": "Use NestJS Logger service"
          }
        }
      },
      "antiPatterns": {
        "description": "Patterns to avoid in NestJS development",
        "forbidden": [
          {
            "pattern": "Circular Dependencies",
            "description": "Modules or services depending on each other",
            "example": "ServiceA -> ServiceB -> ServiceA",
            "prevention": "Use proper module organization and forwardRef()"
          },
          {
            "pattern": "Global Module Overuse",
            "description": "Making too many modules global",
            "example": "@Global() on non-essential modules",
            "prevention": "Use feature modules and proper imports"
          },
          {
            "pattern": "Sync Operations in Lifecycle Hooks",
            "description": "Blocking operations in onModuleInit, etc.",
            "example": "Synchronous DB operations in onModuleInit",
            "prevention": "Use async/await in lifecycle hooks"
          },
          {
            "pattern": "Provider Scope Misuse",
            "description": "Incorrect provider scope selection",
            "example": "Using REQUEST scope for stateless services",
            "prevention": "Choose appropriate scope based on state requirements"
          }
        ]
      }
    },
    "documentCommand": {
      "trigger": "Run doc",
      "description": "Generates NestJS-specific technical documentation",
      "categories": {
        "controller": {
          "required": [
            "route",
            "method",
            "dto",
            "guards",
            "interceptors",
            "response_type",
            "swagger_decoration"
          ]
        },
        "service": {
          "required": [
            "methods",
            "dependencies",
            "error_handling",
            "transaction_management",
            "caching_strategy"
          ]
        },
        "module": {
          "required": [
            "imports",
            "exports",
            "providers",
            "controllers",
            "global_status"
          ]
        }
      }
    },
    "narrowScope": {
      "principles": ["DRY", "SRP", "SOLID"],
      "prohibitedActions": [
        "Mixing HTTP and WebSocket concerns",
        "Improper dependency injection",
        "Synchronous operations in async context"
      ],
      "requiredActions": [
        "Proper module organization",
        "Clean separation of concerns",
        "Proper use of NestJS decorators"
      ]
    }
  }
}